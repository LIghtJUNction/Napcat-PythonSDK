Based on the OpenAPI specification, several fixes were applied:
1.  **Redundant Imports:** Removed `logging` as it was not directly used within the Pydantic models.
2.  **`group_id` Model:** The OpenAPI spec defines `group_id` as a primitive `oneOf: [number, string]`, not an object with `id` and `name`. Therefore, the `group_id` BaseModel was removed, and `group_id` in `GetAiRecordReq` was typed as `int | str`.
3.  **`result` Model (component):** This model was largely kept for its general structure, but it's important to note that the specific API response for `get_ai_record` overrides its `data` field.
    *   `status` field in `result` was changed to `Literal['ok']` as per `const: ok`.
    *   `data` in `result` (generic component) was kept as `dict[str, any]` since the spec defines it as an empty object in `components/schemas/result`.
4.  **`GetAiRecordReq`:**
    *   `group_id` was updated to `int | str`.
    *   Fields were ensured to have descriptions.
5.  **`GetAiRecordRes`:** This was the most critical fix.
    *   The OpenAPI spec for `/get_ai_record`'s response explicitly overrides the `data` field to be `type: string, description: '链接'`. Therefore, the nested `Data` class (`yes: bool`, `reason: str | None`) was removed, and `data` was correctly typed as `str` with its description and default value.
    *   `status` was changed to `Literal['ok']`.
    *   All fields were given explicit defaults and descriptions consistent with the OpenAPI spec and Pydantic best practices.
6.  **General Clean-up:** Ensured all fields have type annotations, descriptions, and appropriate default values. Removed unused imports and followed the `str | None` pattern instead of `Optional`.