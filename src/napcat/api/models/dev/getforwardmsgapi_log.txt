构建日志:
1.  移除了未使用的 `logging` 模块导入。
2.  移除了冗余的 `result` 类，因为响应模型 `GetForwardMsgRes` 已明确定义其结构。
3.  将所有中文命名的模型类（如 `获取合并转发消息`、`消息详情` 等）重命名为更符合 Python 编码规范的英文驼峰命名（如 `GetCombinedForwardMessage`、`MessageDetail`）。
4.  修复了 `GetForwardMsgRes` 的 `status` 字段类型，将其从 `str` 修改为 `Literal["ok"]`，以精确匹配 OpenAPI 规范中的 `const: ok`。
5.  为 `GetForwardMsgRes.Data` 的 `message` 字段设置了 `default_factory=list`，以避免可变默认参数问题。
6.  根据 OpenAPI 定义，为 `sender` 模型的 `sex` 和 `role` 字段定义了 `Literal` 类型，以精确表示枚举值。
7.  针对 `获取合并转发消息` 和 `消息详情` 模型中的 `message` 字段，将其类型从 `list[str]` 修改为 `list[Union[...]]`，并为 OpenAPI 中定义的所有 `anyOf` 消息类型（如文本、艾特、表情、图片、回复、JSON、语音、视频、Markdown、文件、转发消息）创建了独立的 Pydantic 模型及其各自的 `Data` 嵌套模型。
8.  对所有新定义的子消息类型（如 `TextMessage`、`AtMessage` 等）的 `type` 字段使用了 `Literal` 类型，以匹配 OpenAPI 中的 `const` 约束。
9.  为 `VoiceMessage` 和 `MarkdownMessage` 的 `type` 字段正确设置了 `Literal["record"]`，以匹配 OpenAPI 规范。
10. 针对 `消息forward` （现在是 `ForwardMessage`）模型，处理了其 `data` 字段内的 `content` 列表对 `消息详情` （现在是 `MessageDetail`）的循环引用，通过在 `MessageDetail` 中使用字符串形式的类型提示 `'ForwardMessage'`，并在类定义后更新 `MessageDetail.model_fields['message'].annotation` 来确保正确解析。
11. 为所有 Pydantic 模型中的字段添加了详细的 `description` 和合适的 `default` 值（对于可选字段）或 `...` （对于必需字段）。
12. 移除了 `typing.Any` 的导入，因为它不再需要。
13. 确保所有 `list` 类型的字段如果不是必需且没有默认值，则使用 `default_factory=list`。
14. 统一了代码风格，确保符合强制类型标注和禁止弃用 `typing` 模块的规范。