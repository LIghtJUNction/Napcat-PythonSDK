构建过程日志:
1.  **移除不必要的导入**: 移除了 `logging` 模块导入。
2.  **类型标注规范化**: 将 `typing.Any` 替换为内置类型 `any`。为 `status` 字段导入并使用了 `typing.Literal` 以表示固定值 "ok"。
3.  **组件模型修复**: 
    *   将 `result` 类名修改为符合 Pydantic 命名规范的 `Result`。
    *   `Result` 类中的 `status` 字段类型更正为 `Literal["ok"]`，并添加了默认值。
    *   为 `Result` 类中的所有字段 (`retcode`, `data`, `message`, `wording`, `echo`) 添加了默认值或默认工厂函数 (`default_factory=dict` for `data` 字段，以正确表示空对象)。
    *   根据 OpenAPI 规范，`number | string` 和 `user_id` 在 `components/schemas` 中定义为简单的 `anyOf`/`oneOf` 类型（例如 `number` 或 `string`），而非具有 `id` 和 `name` 属性的复杂对象。因此，移除了原始代码中不符合 OpenAPI 规范的 `number | string(BaseModel)` 和 `user_id(BaseModel)` 类定义。
4.  **请求模型 (`FriendPokeReq`) 修复**: 
    *   `user_id` 字段类型更正为 `int | str`，以匹配 OpenAPI `oneOf: [number, string]` 的定义和示例数据。
    *   `target_id` 字段类型更正为 `float | str | None`，以匹配 OpenAPI `anyOf: [number, string]` 的定义，并增加了 `None` 表示可为空，同时设置了 `default=None`。
5.  **响应模型 (`FriendPokeRes`) 修复**: 
    *   根据 OpenAPI 响应 schema (`/friend_poke` 的 `200` 响应体) 中未包含 `data` 字段的结构，移除了原始代码中不匹配的嵌套 `Data` 类及其相关字段。响应模型直接反映 OpenAPI 中定义的根级别字段。
    *   `status` 字段类型更正为 `Literal["ok"]`，并添加了默认值。
    *   为所有字段 (`retcode`, `message`, `wording`, `echo`) 添加了默认值。
6.  **强制类型标注**: 确保所有字段都进行了强制类型标注，并遵循了 `Optional` 改为 `|None`，`Union` 改为 `|` 的指导。
7.  **代码清理**: 移除了未使用的 `logger` 变量。