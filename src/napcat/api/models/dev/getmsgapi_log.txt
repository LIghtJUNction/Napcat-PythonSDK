构建过程日志：
1. 移除了不必要的 `typing.Any` 和 `typing.Union` 导入，因为已废弃并可以使用内置类型或 `|` 运算符。
2. 修复了 `message_id` 请求模型，根据 OpenAPI 规范，其应为 `int | str` 类型，而非一个独立的复杂对象。
3. 删除了原代码中 `result` 类，因为它并非直接用于此 API 的响应结构，且响应模型 `GetMsgRes` 已独立定义。
4. 为 `sender` 模型的 `sex` 和 `role` 字段定义了 `SexEnum` 和 `RoleEnum` 两个枚举类，并进行了驼峰命名。
5. 将所有组件模型（如 `消息详情`, `文本消息` 等）及其内部的 `Data` 类进行了驼峰命名法重构（如 `MessageDetail`, `TextMessage`, `Sender` 等），以符合Pythonic命名规范。
6. 将所有消息段类型（`文本消息`, `艾特消息` 等）定义为独立的 `BaseModel`，并在其内部定义了各自的 `Data` 嵌套类。
7. 定义了 `MessageSegment` 类型别名，它是一个联合类型 (`Union`)，包含了所有可能的单一消息段类型。
8. 修复了 `MessageDetail` 类的 `message` 字段类型，使其能够包含 `MessageSegment` 或 `ForwardMessage` 类型列表，而非原始的 `list[str]`。
9. 解决了 `ForwardMessage` 和 `MessageDetail` 之间的循环依赖问题，通过在 `ForwardMessage.data.content` 字段中使用字符串前向引用 `"MessageDetail"` 来实现。
10. 为所有模型字段添加了详细的 `description`，并根据 OpenAPI 规范设置了正确的默认值或指定为必需字段。
11. 对固定值的字段（如 `status` 和消息段中的 `type`）使用了 `typing.Literal` 进行类型标注，确保类型精确性。
12. 确保所有模型都保留了 `model_config = {"extra": "allow"}` 以允许额外的字段，符合原始设定。
13. 优化了 `GetMsgRes` 响应模型，将其 `data` 字段直接指向 `MessageDetail` 类型，并为其字段设置了正确的默认值和描述。
14. 移除了冗余的 `Data` 嵌套类定义，因为它已被 `MessageDetail` 直接替换。
15. 重新组织了代码结构，将枚举、发送者模型、消息段模型、消息详情和转发消息模型按依赖顺序定义，以确保Pydantic能够正确解析所有类型。